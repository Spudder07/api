FORMAT: 1A
HOST: http://staging-api.corva.ai/v1/

# Corva API

The Corva API is a powerful interface providing great flexibility and extensibility with Corva. Whether your needs are simple UI visualizations, data entry, replication/sync tasks, real-time stream processing, or complex machine learning CPU-intensive apps, the Corva API is the way to make it happen. Our concepts are split into three distinct silos: data apps, visualization apps, and a REST API .

## Data Apps
Data apps come in many flavors and are meant to process data either in real-time or event-based and produce the results with no UI. Types of data apps:
* Sources - Input data producers
* Enrichment - Modify data in-place or enrich stream
* Stream-based - Continuous incoming data stream processing
* Event-based - Infrequent or time-based processing

### Data App Settings
All data apps have global settings definitions, instance settings definitions, or can define custom UI for settings.

## Visualization Apps

## REST API 

# Group Authentication

Apps must use the app token received in the dev-center. 

Corva uses JSON Web Tokens in order to handle user authentication.
https://jwt.io/




# Group App Storage

The app storage API is the mechanism for storing and retrieving app settings, results, and values.

## App Storage Records [/app_storage/{app}/{collection}]

+ Parameters
    + app: my_app (required, string) - App key
    + collection: data (required, string) - Storage collection
    
### Create a New App Storage Record [POST]

Creates an app storage record. Authentication required. Records will be scoped
to the company automatically. Timestamps will be added to records automatically.

+ data (JSON) - The record contents
+ timestamp (integer) - Unix timestamp for the record. May be omitted and defaults to current time.
+ asset_id (integer) - ID of the asset the record is related to. May be omitted. 
+ version (number) - The record schema version, defaults to 1

+ Request (application/json)

            {
                "data": {
                    "measured_depth": 5535,
                    "casing_friction_factor": 0.15,
                    "open_hole_slackoff_friction_factor": 0.20,
                    "open_hole_pickup_friction_factor": 0.25
                },
                "timestamp": 1482117436,
                "asset_id": 123,
                "version": 1
            }

+ Response 201 (application/json)

    + Headers

            Location: /app_storage/corva.torque_and_drag.friction_factor/user_overrides

    + Body

            {
                "app: "corva.torque_and_drag.friction_factor",
                "collection": "user_overrides",
                "timestamp": 1482117436,
                "asset_id": 123,
                "version": 1,
                "data": {
                    "measured_depth": 5535,
                    "casing_friction_factor": 0.15,
                    "open_hole_slackoff_friction_factor": 0.20,
                    "open_hole_pickup_friction_factor": 0.25
                }
            }
            
### Retrieve App Storage Records [GET]

Fetches one or more records from app storage.

+ asset_id (integer) - ID of the asset. If omitted, query will be made to all assets.
+ query (string) - The serialized database query. If omitted, defaults to "the record with the newest timestamp".


+ Response 201 (application/json)

    + Headers

            Location: /app_storage/corva.torque_and_drag.friction_factor/user_overrides

    + Body

            {
                "app: "corva.torque_and_drag.friction_factor",
                "collection": "user_overrides",
                "timestamp": 1482117436,
                "asset_id": 123,
                "version": 1,
                "data": {
                    "measured_depth": 5535,
                    "casing_friction_factor": 0.15,
                    "open_hole_slackoff_friction_factor": 0.20,
                    "open_hole_pickup_friction_factor": 0.25
                }
            }


# Group Assets

Assets are the pieces of equipment in the field. They can be programs, wells, or individual rigs.

## Asset Collection [/assets{?types}]

### List All Assets [GET]

Retrieves a collection of asset records. The `types` parameter is optional,
and will filter the results. Authentication required.

+ Parameters
    + types (array) - possible values are `rig`, `well`, and `program`

+ Response 200 (application/json)

        [
            {
                "id": 2,
                "name": "Rig #23",
                "type": "rig",
                "stats": {},
                "asset_type": "rig",
                "parent_asset_id": 1232,
                "last_active_at": "2017-01-01T00:00:00",
                "status": "active",
                "created_at": "2017-01-01T00:00:00"
            },
            {
                ...
            }
        ]

### Create a New Asset [POST]

Creates an asset record. Authentication required.

+ name (string) - The asset name
+ type (string) - The type of rig. [rig|well|program]
+ status (string) - asset status [unknown|idle|active|paused|complete]
+ stats (JSON) - stats
+ parent_asset_id (integer) - ID of the assets parent 
+ last_active_at (datetime) - datetime that the asset was last active

+ Request (application/json)

            {
                "asset": {
                    "name": "Rig 1",
                    "type": "rig"
                }
            }

+ Response 201 (application/json)

    + Headers

            Location: /assets/1

    + Body

                {
                    "id": 2,
                    "name": "Rig #1",
                    "type": "rig",
                    "stats": {},
                    "asset_type": "rig",
                    "parent_asset_id": null,
                    "last_active_at": "2017-01-01T00:00:00",
                    "status": "active",
                    "created_at": "2017-01-01T00:00:00"
                }
                
## Asset [/assets/{asset_id}]

+ Parameters
    + asset_id (integer) - ID of the Asset
    
### View an Asset Detail [GET]

+ Response 200 (application/json)

                {
                    "id": 2,
                    "name": "Rig #1",
                    "type": "rig",
                    "stats": {},
                    "asset_type": "rig",
                    "parent_asset_id": null,
                    "last_active_at": "2017-01-01T00:00:00",
                    "status": "active",
                    "created_at": "2017-01-01T00:00:00"
                }
                
### Update an Asset [PUT]

+ name (string) - The asset name
+ type (string) - The type of rig. [rig|well|program]
+ status (string) - asset status [unknown|idle|active|paused|complete]
+ stats (JSON) - stats
+ parent_asset_id (integer) - ID of the assets parent 
+ last_active_at (datetime) - datetime that the asset was last active


+ Request (application/json)

            {
                "asset": {
                    "name": "Rig 1",
                    "type": "rig"
                }
            }

+ Response 200 (application/json)

                {
                    "id": 2,
                    "name": "Rig #1",
                    "type": "rig",
                    "stats": {},
                    "asset_type": "rig",
                    "parent_asset_id": null,
                    "last_active_at": "2017-01-01T00:00:00",
                    "status": "active",
                    "created_at": "2017-01-01T00:00:00"
                }                
          
            


### Delete [DELETE]
            
+ Response 204


## Notifications [/notifications]


### Create a Notification [POST]

Creates and returns a notification event.

+ Request (application/json)

                {
                    
                }

+ Response 201 (application/json)

    + Body

                {
                    
                }


## Communication [/layer_identities]

### Create a New Layer Identity Token [POST]

Creates and returns a layer identity token.

+ nonce (string) - The nonce token provided by the layer client

+ Request (application/json)

                {
                    "nonce": "l24kjlkj2l3s0d9f2jkl209sdfu0jkl234"
                }

+ Response 201 (application/json)

    + Body

                {
                    "layer_identity": "2l3k4j3lkjs098sd0k4j2ljs0d9f2l34j0ds9jl234j0jofj23..."
                }