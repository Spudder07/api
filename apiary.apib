FORMAT: 1A
HOST: https://api.corva.ai/v1/

# Corva API

The Corva API is a powerful interface providing great flexibility and extensibility with Corva. Whether your needs are simple UI visualizations, data entry, replication/sync tasks, real-time stream processing, or complex machine learning CPU-intensive apps, the Corva API is the way to make it happen. Our concepts are split into three distinct silos: data apps, visualization apps, and a REST API .

## Data Apps
Data apps come in many flavors and are meant to process data either in real-time or event-based and produce the results with no UI. Types of data apps:
* Sources - Input data producers
* Enrichment - Modify data in-place or enrich stream
* Stream-based - Continuous incoming data stream processing
* Event-based - Infrequent or time-based processing

## Subscriptions

Apps can hook into create, update and destroy events occuring in App Data API. 

TODO: describe how to subscribe into corva-subscriptions app and start receiving messages.

Channel keys are composed as following:

Create events: {provider}/{collection}/{asset_id}

Update events: {provider}/{collection}/{asset_id}/update

Destroy events: {provider}/{collection}/{asset_id}/destroy

### Data App Settings
All data apps have global settings definitions, instance settings definitions, or can define custom UI for settings.

## Visualization Apps

## REST API 

# Group Authentication

Apps must use the app token received in the dev-center. 

Corva uses JSON Web Tokens in order to handle user authentication.
https://jwt.io/

## Auth Tokens [/user_token]

### Create an Auth Token [POST]

Creates an Auth Token you can use for authenticating future requests.

+ Attributes
    + auth[email]: mike@corva.ai (required, string) - User email
    + auth[password]: password (required, string) - User password
    
+ Request (application/json)

            {
                "auth": {
                    "email": "mike@corva.ai",
                    "password": "password"
                }
            }

+ Response 201 (application/json)

    + Body

            {
                "auth_key: "42kjsd9f0o4jlds9f02kljsdfo9j2lk",
                "messaging_key": "l2k4j2lk490dflj4k209sd8flkj2l2k4j"
            }




# Group Apps

Endpoints for controlling and using apps to store and produce records, and read data.

## App Data [/data/{provider}/{collection}]

The app data API is the mechanism for storing and retrieving app settings, results, and values.


### Create a New App Data Record [POST]

Creates an app data record. Authentication required. Records will be scoped
to the company automatically. Timestamps will be added to records automatically.

+ Parameters
    + provider: my_company (required, string) - Provider key
    + collection: data (required, string) - Data collection
    

+ Attributes
    + data (string) - The record content
    + timestamp (number) - Unix timestamp for the record. May be omitted and defaults to current time.
    + asset_id (number) - ID of the asset the record is related to. May be omitted. 
    + version (number) - The record schema version, defaults to 1

+ Request (application/json)

            {
                "data": {
                    "measured_depth": 5535,
                    "casing_friction_factor": 0.15,
                    "open_hole_slackoff_friction_factor": 0.20,
                    "open_hole_pickup_friction_factor": 0.25
                },
                "timestamp": 1482117436,
                "asset_id": 123,
                "version": 1
            }

+ Response 201 (application/json)

    + Headers

            Location: /data/corva/torque-and-drag.friction-factor-user-overrides"

    + Body

            {
                "provider: "corva",
                "collection": "torque-and-drag.friction-factor-user-overrides",
                "_id": "1234-5678-9012-3456",
                "timestamp": 1482117436,
                "asset_id": 123,
                "version": 1,
                "data": {
                    "measured_depth": 5535,
                    "casing_friction_factor": 0.15,
                    "open_hole_slackoff_friction_factor": 0.20,
                    "open_hole_pickup_friction_factor": 0.25
                }
            }
            
### Retrieve App Data Records [GET]

Fetches one or more records from app data. By default, it returns "the records with the newest timestamp"

+ Parameters
    + provider: my_company (required, string) - Provider key
    + collection: data (required, string) - Data collection

+ Attributes
    + asset_id (number) - ID of the asset. If omitted, query will be made to all assets.
    + query (string) - The serialized database query with following syntax: 
    `{<field>#<operator>#<value>}AND{<field>#<operator>#<value>}...`
        + operators: 
            + `gt`, `gte`, `lt`, `lte`, `eq`, `ne`
        + value types:
            + string: should be enclosed in single quote(`'`)
            + number: without quote
    + where (string) - The database query containing Javascript expression. 
    *Example: {this.credits == this.debits || this.credits > this.debits}*
    + fields (string) - Database fields list seperated by comma(`,`) to return only limited fields as a result. 
    + limit (number) - How many results to get. *Defaults to 1*. Use 0 to get all matching records.
    + sort (string) - Sorting order or returned results. *Defaults to '{timestamp:-1}'*. Use '{<field>:<value>}' where value is 1 or -1.

+ Response 201 (application/json)

    + Headers

            Location: /data/torque-and-drag.friction-factor-user-overrides

    + Body

            {
                "_id": "1234-5678-9012-3456",
                "provider: "corva",
                "collection": "torque-and-drag.friction-factor-user-overrides",
                "timestamp": 1482117436,
                "asset_id": 123,
                "version": 1,
                "data": {
                    "measured_depth": 5535,
                    "casing_friction_factor": 0.15,
                    "open_hole_slackoff_friction_factor": 0.20,
                    "open_hole_pickup_friction_factor": 0.25
                }
            }

### Update an App Data Record [PUT /data/{provider}/{collection}/{_id}]

Updates an existing data record. Authentication required. Records will be scoped
to the company automatically. Timestamps will be added to records automatically.

+ Parameters
    + provider: my_company (required, string) - Provider key
    + collection: data (required, string) - Data collection
    + _id: "1234-5678-9012-3456" (required, string) - The identifier of the record to be updated
    

+ Attributes
    + data (string) - The record content
    + timestamp (number) - Unix timestamp for the record. May be omitted and defaults to current time.
    + asset_id (number) - ID of the asset the record is related to. May be omitted. 
    + version (number) - The record schema version, defaults to 1

+ Request (application/json)

            {
                "data": {
                    "measured_depth": 5535,
                    "casing_friction_factor": 0.15,
                    "open_hole_slackoff_friction_factor": 0.20,
                    "open_hole_pickup_friction_factor": 0.25
                },
                "timestamp": 1482117436,
                "asset_id": 123,
                "version": 1
            }

+ Response 200 (application/json)

    + Headers

            Location: /data/corva/

    + Body

            {
                "provider: "corva",
                "collection": "torque-and-drag.friction-factor-user-overrides",
                "_id": "1234-5678-9012-3456",
                "timestamp": 1482117436,
                "asset_id": 123,
                "version": 1,
                "data": {
                    "measured_depth": 5535,
                    "casing_friction_factor": 0.15,
                    "open_hole_slackoff_friction_factor": 0.20,
                    "open_hole_pickup_friction_factor": 0.25
                }
            }
            
### Delete an App Data Record [DELETE /data/{provider}/{collection}/{_id}]

Deletes an existing data record. Authentication required. Records will be scoped
to the company automatically.

+ Parameters
    + provider: my_company (required, string) - Provider key
    + collection: data (required, string) - Data collection
    + _id: "1234-5678-9012-3456" (required, string) - The identifier of the record to be updated
    
    
+ Response 204




## App Tasks [/tasks/{provider}/{collection}?asset_id={asset_id}]

The app tasks API is the mechanism for executing task applications.


### Execute a Task [POST]

Schedules a task to be asynchronously executed.
Body may contain a document file upload. 
Authentication required. 

+ Parameters
    + provider: my_company (required, string) - Task provider key
    + collection: data (required, string) - Task data collection
    + asset_id (number) - The asset 


+ Response 201 (application/json)

    + Headers

            Location: /tasks/corva.tasks/survey_parser?asset_id=1234

    + Body

            {
              "id": "1234-5678-9012-3456"
            }


### Update an App Task with Results [PUT /{provider}/{collection}/{id}]

Updates an existing task with processed results. Authentication required. Timestamps will be added to records automatically.

+ Parameters
    + provider: my_company (required, string) - Provider key
    + collection: data (required, string) - Task data collection
    + id: "1234-5678-9012-3456" (required, string) - The identifier of the task to be updated
    

+ Attributes
    + data (string) - The record content
    + timestamp (number) - Unix timestamp for the record. May be omitted and defaults to current time.
    + asset_id (number) - ID of the asset the record is related to. May be omitted. 
    + company_id (number) - ID of the company the task is associated with.
    + version (number) - The record schema version, defaults to 1

+ Request (application/json)

            {
                "data": {
                    "stations": [{
                      "svy_inclination": 0,
                      "svy_azimuth": 0,
                      "svy_depth": 0
                     }]
                },
                "timestamp": 1482117436,
                "asset_id": 123,
                "company_id": 456
                "version": 1
            }

+ Response 200 (application/json)

    + Headers

            Location: /data/corva.torque_and_drag.friction_factor/user_overrides

    + Body

            {
                "provider: "corva",
                "collection": "torque-and-drag.friction-factor-user-overrides",
                "_id": "1234-5678-9012-3456",
                "timestamp": 1482117436,
                "asset_id": 123,
                "version": 1,
                "data": {
                    "measured_depth": 5535,
                    "casing_friction_factor": 0.15,
                    "open_hole_slackoff_friction_factor": 0.20,
                    "open_hole_pickup_friction_factor": 0.25
                }
            }


## Cache [/cache/{key}]

Apps can save data in fast-access cache database. This is a key-value storage system. This type of scenario is good for aggregate or continuous functions.

### Set Value [POST]

Saves the request body value into Redis database.

+ Parameters
    + key: counter (required, string) - The cache key

+ Request (text)

    + Body
    
            34534645
    
+ Response 201

### Get Value [GET]

Receives the stored value from fast-access cache database.

+ Response 200 (text/plain)

    + Body
        
            34534645

# Group Assets

Assets are the pieces of equipment in the field. They can be programs, wells, or individual rigs.

## Asset Collection [/assets{?types}{?search}]

### List All Assets [GET]

Retrieves a collection of asset records. The `types` parameter is optional,
and will filter the results. Authentication required.

+ Parameters
    + types (optional, array) - types of results to return
        + Members
            + `all`
            + `rig`
            + `well`
            + `program`
        + Default: all
    + search (optional, string) - search term for asset name

+ Response 200 (application/json)

        [
            {
                "id": 2,
                "name": "Rig #23",
                "type": "rig",
                "stats": {},
                "asset_type": "rig",
                "parent_asset_id": 1232,
                "last_active_at": "2017-01-01T00:00:00",
                "status": "active",
                "created_at": "2017-01-01T00:00:00"
            },
            {
                ...
            }
        ]

### Create a New Asset [POST]

Creates an asset record. Authentication required.

+ Attributes 
    + name: Well ABX 2 (required, string) - The asset name
    + type: well (required, enum[string]) - The type of the asset 
        + Members
            + all - All Asset Types
            + rig - Drilling Rig
            + well - Drilling Well
            + program - Drilling Program Collection
    + status: active  (enum[string]) - The asset status
        + Members
            + unknown - Unknown status
            + idle - Idle
            + active - Active
            + paused - Paused
            + complete - Complete
    + parent_asset_id: 34 (number) - ID of the assets parent
    + last_active_at (number) - The datetime that the asset was last active

+ Request (application/json)

            {
                "asset": {
                    "name": "Well ABX 2",
                    "type": "well",
                    "status": "active",
                    "parent_asset_id": 34
                }
            }

+ Response 201 (application/json)

    + Headers

            Location: /assets/1

    + Body

                {
                    "id": 2,
                    "name": "Rig #1",
                    "type": "rig",
                    "stats": {},
                    "asset_type": "rig",
                    "parent_asset_id": null,
                    "last_active_at": "2017-01-01T00:00:00",
                    "status": "active",
                    "created_at": "2017-01-01T00:00:00"
                }
                
## Asset [/assets/{asset_id}]

+ Parameters
    + asset_id (integer) - ID of the Asset
    
### View an Asset Detail [GET]

+ Response 200 (application/json)

                {
                    "id": 2,
                    "name": "Rig #1",
                    "type": "rig",
                    "stats": {},
                    "asset_type": "rig",
                    "parent_asset_id": null,
                    "last_active_at": "2017-01-01T00:00:00",
                    "status": "active",
                    "created_at": "2017-01-01T00:00:00"
                }
                
### Update an Asset [PUT]

+ Attributes 
    + name: Well ABX 2 (required, string) - The asset name
    + type: well (required, enum[string]) - The type of the asset 
        + Members
            + all - All Asset Types
            + rig - Drilling Rig
            + well - Drilling Well
            + program - Drilling Program Collection
    + status: active  (enum[string]) - The asset status
        + Members
            + unknown - Unknown status
            + idle - Idle
            + active - Active
            + paused - Paused
            + complete - Complete
    + parent_asset_id: 34 (number) - ID of the assets parent
    + last_active_at (number) - The datetime that the asset was last active


+ Request (application/json)

            {
                "asset": {
                    "name": "Rig 1",
                    "type": "rig"
                }
            }

+ Response 200 (application/json)

                {
                    "id": 2,
                    "name": "Rig #1",
                    "type": "rig",
                    "stats": {},
                    "asset_type": "rig",
                    "parent_asset_id": null,
                    "last_active_at": "2017-01-01T00:00:00",
                    "status": "active",
                    "created_at": "2017-01-01T00:00:00"
                }                
          
            


### Delete [DELETE]
            
+ Response 204


# Group Notifications

Notification and event methods.

## Notification Collection [/notifications]

### Create a Notification [POST]

Creates a notification record.

+ Attributes 
    + user_id (number) - ID of the user for whom the notification is intended
    + asset_id (number) - ID of the asset the notification relates to
    + message (string) - the notification text

+ Request (application/json)

            {
                "notification": {
                    "user_id": 2938,
                    "asset_id": 98898,
                    "message": "Well has gone offline"
                }
            }

+ Response 201 (application/json)

    + Headers

            Location: /notifications/1

    + Body

                {
                    "id": 2,
                    "user_id": 2938,
                    "asset_id": 98808
                    "message": "Well has gone offline",
                    "acknowledged": false,
                    "created_at": "2017-01-01T00:00:00"
                }

## Notification [/notifications/{notification_id}]

+ Parameters
    + notification_id (integer) - ID of the Notification
    
### View an Notifcation [GET]

+ Response 200 (application/json)

                {
                    "id": 2,
                    "user_id": 2938,
                    "asset_id": 98808
                    "message": "Well has come back online",
                    "acknowledged": false,
                    "created_at": "2017-01-01T00:00:00"
                }   
                    
### Update a Notification [PATCH]

+ Request (application/json)

    + Attributes
        + user_id (number) - ID of the user for whom the notification is intended
        + asset_id (number) - ID of the asset the notification relates to
        + message (string) - The notification text


    + Body
    
            {
                "notification": {
                    "user_id": 2938,
                    "asset_id": 98898,
                    "message": "Well has come back online"
                }
            }

+ Response 200 (application/json)

                {
                    "id": 2,
                    "user_id": 2938,
                    "asset_id": 98808
                    "message": "Well has come back online",
                    "acknowledged": false,
                    "created_at": "2017-01-01T00:00:00"
                }

# Group Users

## User [/users/current]

### Retrieve the current user [GET]

+ Response 200 (application/json)

                {
                    "id": 8429,
                    "company_id": 1122,
                    "first_name": "John",
                    "last_name": "Smith",
                    "email": "john@example.com",
                    "created_at": "2017-01-01T00:00:00",
                    "reset_password_token": "4j2kd94jks93kl2a",
                    "recently_viewed_asset_ids": [1,2,3]
                }
                
                         
                         
# Group Streams

Streams are the concept for real-time data pipelines. Stream apps run inside of streams, which control the flow of information and apps for real-time data.

## Stream Collection [/app_streams{?search}]

### List All Streams [GET]

Retrieves a collection of streams records. Authentication required.

+ Parameters
    + search (optional, string) - search term for stream name

+ Response 200 (application/json)

        [
            {
                "id": 2,
                "asset_id": 20,
                "configuration": "{}",
                "created_at": "2017-05-03T15:35:55.709Z",
                "updated_at": "2017-05-06T18:51:44.453Z",
                "company_id": 2,
                "status": "idle",
                "name": "Rig ABC Stream"
            },
            {
                ...
            }
        ]
        
# Group Preferences

User preferences

## Preference [/preferences]

### View a Users preferences [GET]

+ Response 200 (application/json)

                {
                    "push_notifications_enabled": false,
                    "messaging_notifications_enabled": true,
                    "alert_levels": ["information", "warning", "error"]
                }
                
### Update an User Preference [PUT]

+ push_notifications_enabled (boolean) - push notifications on/off
+ messaging_notifications_enabled (boolean) - message notifications on/off
+ alert_levels (array) - types of notifications the user wants to receive [information|warning|error]


+ Request (application/json)

            {
                "preference": {
                    "messaging_notifications_enabled": true,
                    "alert_levels": ["information", "warning"]
                }
            }

+ Response 200 (application/json)

                {
                    "push_notifications_enabled": false,
                    "messaging_notifications_enabled": true,
                    "alert_levels": ["information", "warning"]
                }               
          

# Group Communication

Communication, chat, and annotation methods.

## Communication [/messaging_keys]

### Create a New Messaging Key [POST]

Creates and returns a messaging key token.

+ nonce (string) - The nonce token provided by the layer client

+ Request (application/json)

                {
                    "nonce": "l24kjlkj2l3s0d9f2jkl209sdfu0jkl234"
                }

+ Response 201 (application/json)

    + Body

                {
                    "messaging_key": "2l3k4j3lkjs098sd0k4j2ljs0d9f2l34j0ds9jl234j0jofj23..."
                }